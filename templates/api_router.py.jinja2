from fastapi import APIRouter, Depends, Query, HTTPException, Response
from sqlalchemy.orm import Session
from sqlalchemy import select, func, or_, text, String, Integer, Float, SmallInteger
from typing import Optional, Union, Dict, List
from {{ project_name }}.src.core.cache import cache_result
from {{ project_name }}.src.core import settings
from {{ project_name }}.src.db.database import get_db
from {{ project_name }}.src.db.pipelines.{{ router.pipeline_name }}.{{ router.name }}_model import {{ router.model.model_name }}
import math
from datetime import datetime
{% if router.model.foreign_keys %}
# Import core/reference tables for joins
{% set imported_tables = [] %}
{% for fk in router.model.foreign_keys %}
{% if fk.table_name not in imported_tables %}
from {{ project_name }}.src.db.pipelines.{{ fk.pipeline_name }}.{{ fk.table_name}}_model import {{ fk.model_name }}
{% set _ = imported_tables.append(fk.table_name) %}
{% endif %}
{% endfor %}
{% endif %}

router = APIRouter(
    prefix="/{{ router.name }}",
    responses={404: {"description": "Not found"}},
)

def create_pagination_links(base_url: str, total_count: int, limit: int, offset: int, params: dict) -> dict:
    """Generate pagination links for response headers"""
    links = {}
    total_pages = math.ceil(total_count / limit) if limit > 0 else 1
    current_page = (offset // limit) + 1 if limit > 0 else 1
    
    # Remove offset from params to rebuild
    query_params = {k: v for k, v in params.items() if k not in ['offset', 'limit'] and v is not None}
    
    # Helper to build URL
    def build_url(new_offset: int) -> str:
        params_str = "&".join([f"{k}={v}" for k, v in query_params.items()])
        return f"{base_url}?limit={limit}&offset={new_offset}" + (f"&{params_str}" if params_str else "")
    
    # First page
    links['first'] = build_url(0)
    
    # Last page
    last_offset = (total_pages - 1) * limit
    links['last'] = build_url(last_offset)
    
    # Next page (if not on last page)
    if current_page < total_pages:
        links['next'] = build_url(offset + limit)
    
    # Previous page (if not on first page)
    if current_page > 1:
        links['prev'] = build_url(max(0, offset - limit))
    
    return links

@router.get("/")
@cache_result(prefix="{{ router.name }}", ttl=86400, exclude_params=["response", "db"])
def get_{{ router.name }}(
    response: Response,
    limit: int = Query(100, le=1000, ge=1, description="Maximum records to return"),
    offset: int = Query(0, ge=0, description="Number of records to skip"),
    {% for fk in router.model.foreign_keys %}
    {{ fk.sql_column_name }}: Optional[str] = Query(None, description="Filter by {{ fk.table_name }} code"),
        {% if fk.reference_description_column %}
    {{ fk.reference_description_column }}: Optional[str] = Query(None, description="Filter by {{ fk.table_name }} description"),
        {% endif %}
    {% endfor %}
    # Dynamic column filters based on model
    {% for column in router.model.column_analysis %}
    {% if column.sql_column_name not in ['id', 'created_at', 'updated_at'] and column.csv_column_name not in router.model.exclude_columns %}
        {% if column.sql_column_name == 'year' %}
    year: Optional[int] = Query(None, description="Filter by exact year"),
    year_min: Optional[int] = Query(None, description="Minimum year"),
    year_max: Optional[int] = Query(None, description="Maximum year"),
        {% elif column.inferred_sql_type in ['Float', 'Integer'] %}
    {{ column.sql_column_name }}: Optional[Union[float, int]] = Query(None, description="Exact {{ column.sql_column_name.replace('_', ' ') }}"),
    {{ column.sql_column_name }}_min: Optional[Union[float, int]] = Query(None, description="Minimum {{ column.sql_column_name.replace('_', ' ') }}"),
    {{ column.sql_column_name }}_max: Optional[Union[float, int]] = Query(None, description="Maximum {{ column.sql_column_name.replace('_', ' ') }}"),
        {% elif column.inferred_sql_type == 'SmallInteger' and column.sql_column_name != 'year' %}
    {{ column.sql_column_name }}: Optional[int] = Query(None, description="Filter by {{ column.sql_column_name.replace('_', ' ') }}"),
        {% elif column.inferred_sql_type == 'String' %}
    {{ column.sql_column_name }}: Optional[str] = Query(None, description="Filter by {{ column.sql_column_name.replace('_', ' ') }} (partial match)"),
    {{ column.sql_column_name }}_exact: Optional[str] = Query(None, description="Filter by exact {{ column.sql_column_name.replace('_', ' ') }}"),
        {% endif %}
    {% endif %}
    {% endfor %}
    include_all_reference_columns: bool = Query(False, description="Include all columns from reference tables"),
    fields: Optional[str] = Query(None, description="Comma-separated list of fields to return"),
    sort: Optional[str] = Query(None, description="Sort fields (use - prefix for descending, e.g., 'year,-value')"),
    db: Session = Depends(get_db)
) -> Dict:
    """
    Get {{ router.name.replace('_', ' ') }} data with filters and pagination.
    
    ## Pagination
    - Use `limit` and `offset` for page-based navigation
    - Response includes pagination metadata and total count
    - Link headers provided for easy navigation
    
    ## Filtering
    {% for fk in router.model.foreign_keys %}
    - {{ fk.sql_column_name }}: Filter by {{ fk.table_name }} code
        {% if fk.reference_description_column %}
    - {{ fk.reference_description_column }}: Filter by {{ fk.table_name }} description (partial match)
        {% endif %}
    {% endfor %}
    
    Dataset-specific filters:
    {% for column in router.model.column_analysis %}
    {% if column.sql_column_name not in ['id', 'created_at', 'updated_at'] and column.csv_column_name not in router.model.exclude_columns %}
        {% if column.sql_column_name == 'year' %}
    - year: Exact year
    - year_min/year_max: Year range
        {% elif column.inferred_sql_type in ['Float', 'Integer'] %}
    - {{ column.sql_column_name }}: Exact value
    - {{ column.sql_column_name }}_min/{{ column.sql_column_name }}_max: Value range
        {% elif column.inferred_sql_type == 'String' %}
    - {{ column.sql_column_name }}: Partial match (case-insensitive)
    - {{ column.sql_column_name }}_exact: Exact match
        {% endif %}
    {% endif %}
    {% endfor %}
    
    ## Response Format
    - Returns paginated data with metadata
    - Total count included for client-side pagination
    - Links to first, last, next, and previous pages
    """
    
    # Build column list for select
    columns = []
    column_map = {}  # Map of field name to column object
    
    # Parse requested fields if specified (preserving order)
    requested_fields = [field.strip() for field in fields.split(',') if field.strip()] if fields else None
    requested_fields_set = set(requested_fields) if requested_fields else None
    
    # First, build a map of all available columns
    # Main table columns
    for col in {{ router.model.model_name }}.__table__.columns:
        if col.name not in ['created_at', 'updated_at']:
            column_map[col.name] = col
    
    {% if router.model.foreign_keys %}
    # Reference table columns
    {% for fk in router.model.foreign_keys %}
    if include_all_reference_columns:
        # Add all reference columns
        for col in {{ fk.model_name }}.__table__.columns:
            if col.name not in ['id', 'created_at', 'updated_at', 'source_dataset']:
                col_alias = "{{ fk.table_name }}_" + col.name
                column_map[col_alias] = col.label(col_alias)
    else:
        # Just key columns
        col_alias = "{{ fk.table_name }}_{{ fk.sql_column_name }}"
        column_map[col_alias] = {{ fk.model_name }}.{{ fk.sql_column_name }}.label(col_alias)
        {% if fk.reference_description_column %}
        col_alias = "{{ fk.table_name }}_{{ fk.reference_description_column }}"
        column_map[col_alias] = {{ fk.model_name }}.{{ fk.reference_description_column }}.label(col_alias)
        {% endif %}
        {% for col in fk.reference_additional_columns %}
        col_alias = "{{ fk.table_name }}_{{ col }}"
        column_map[col_alias] = {{ fk.model_name }}.{{ col }}.label(col_alias)
        {% endfor %}
    {% endfor %}
    {% endif %}
    
    # Now build columns list in the requested order
    if requested_fields:
        # Add columns in the order specified by the user
        for field_name in requested_fields:
            if field_name in column_map:
                columns.append(column_map[field_name])
            # If id is requested, include it even though we normally exclude it
            elif field_name == 'id' and hasattr({{ router.model.model_name }}, 'id'):
                columns.append({{ router.model.model_name }}.id)
    else:
        # No specific fields requested, use all available columns in default order
        for col in {{ router.model.model_name }}.__table__.columns:
            if col.name not in ['created_at', 'updated_at']:
                columns.append(col)
        
        {% if router.model.foreign_keys %}
        # Add reference columns in default order
        {% for fk in router.model.foreign_keys %}
        if include_all_reference_columns:
            for col in {{ fk.model_name }}.__table__.columns:
                if col.name not in ['id', 'created_at', 'updated_at', 'source_dataset']:
                    columns.append(col.label("{{ fk.table_name }}_" + col.name))
        else:
            columns.append({{ fk.model_name }}.{{ fk.sql_column_name }}.label("{{ fk.table_name }}_{{ fk.sql_column_name }}"))
            {% if fk.reference_description_column %}
            columns.append({{ fk.model_name }}.{{ fk.reference_description_column }}.label("{{ fk.table_name }}_{{ fk.reference_description_column }}"))
            {% endif %}
            {% for col in fk.reference_additional_columns %}
            columns.append({{ fk.model_name }}.{{ col }}.label("{{ fk.table_name }}_{{ col }}"))
            {% endfor %}
        {% endfor %}
        {% endif %}
    
    # Build base query
    query = select(*columns).select_from({{ router.model.model_name }})
    
    {% if router.model.foreign_keys %}
    # Add joins
    {% for fk in router.model.foreign_keys %}
    query = query.outerjoin({{ fk.model_name }}, {{ router.model.model_name }}.{{ fk.hash_fk_sql_column_name }} == {{ fk.model_name }}.id)
    {% endfor %}
    {% endif %}
    
    # Build filter conditions for both main query and count query
    conditions = []
    
    # Apply foreign key filters
    {% for fk in router.model.foreign_keys %}
    if {{ fk.sql_column_name }}:
        conditions.append({{ fk.model_name }}.{{ fk.sql_column_name }} == {{ fk.sql_column_name }})
    {% if fk.reference_description_column %}
    if {{ fk.reference_description_column }}:
        conditions.append({{ fk.model_name }}.{{ fk.reference_description_column }}.ilike("%" + {{ fk.reference_description_column }} + "%"))
    {% endif %}
    {% endfor %}
    
    # Apply dataset-specific column filters
    {% for column in router.model.column_analysis %}
    {% if column.sql_column_name not in ['id', 'created_at', 'updated_at'] and column.csv_column_name not in router.model.exclude_columns %}
        {% if column.sql_column_name == 'year' %}
    if year is not None:
        conditions.append({{ router.model.model_name }}.year == year)
    if year_min is not None:
        conditions.append({{ router.model.model_name }}.year >= year_min)
    if year_max is not None:
        conditions.append({{ router.model.model_name }}.year <= year_max)
        {% elif column.inferred_sql_type in ['Float', 'Integer'] %}
    if {{ column.sql_column_name }} is not None:
        conditions.append({{ router.model.model_name }}.{{ column.sql_column_name }} == {{ column.sql_column_name }})
    if {{ column.sql_column_name }}_min is not None:
        conditions.append({{ router.model.model_name }}.{{ column.sql_column_name }} >= {{ column.sql_column_name }}_min)
    if {{ column.sql_column_name }}_max is not None:
        conditions.append({{ router.model.model_name }}.{{ column.sql_column_name }} <= {{ column.sql_column_name }}_max)
        {% elif column.inferred_sql_type == 'SmallInteger' and column.sql_column_name != 'year' %}
    if {{ column.sql_column_name }} is not None:
        conditions.append({{ router.model.model_name }}.{{ column.sql_column_name }} == {{ column.sql_column_name }})
        {% elif column.inferred_sql_type == 'String' %}
    if {{ column.sql_column_name }} is not None:
        conditions.append({{ router.model.model_name }}.{{ column.sql_column_name }}.ilike("%" + {{ column.sql_column_name }} + "%"))
    if {{ column.sql_column_name }}_exact is not None:
        conditions.append({{ router.model.model_name }}.{{ column.sql_column_name }} == {{ column.sql_column_name }}_exact)
        {% endif %}
    {% endif %}
    {% endfor %}
    
    # Apply all conditions
    if conditions:
        query = query.where(*conditions)
    
    # Apply sorting if specified
    if sort:
        order_by_clauses = []
        for sort_field in sort.split(','):
            sort_field = sort_field.strip()
            if sort_field:  # Skip empty strings
                if sort_field.startswith('-'):
                    # Descending order
                    field_name = sort_field[1:].strip()
                    if hasattr({{ router.model.model_name }}, field_name):
                        order_by_clauses.append(getattr({{ router.model.model_name }}, field_name).desc())
                else:
                    # Ascending order
                    if hasattr({{ router.model.model_name }}, sort_field):
                        order_by_clauses.append(getattr({{ router.model.model_name }}, sort_field))
        
        if order_by_clauses:
            query = query.order_by(*order_by_clauses)
    else:
        # Default ordering by ID for consistent pagination
        query = query.order_by({{ router.model.model_name }}.id)
    
    # Get total count with filters applied
    count_query = select(func.count()).select_from({{ router.model.model_name }})
    
    {% if router.model.foreign_keys %}
    # Add joins to count query
    {% for fk in router.model.foreign_keys %}
    count_query = count_query.outerjoin({{ fk.model_name }}, {{ router.model.model_name }}.{{ fk.hash_fk_sql_column_name }} == {{ fk.model_name }}.id)
    {% endfor %}
    {% endif %}
    
    # Apply same conditions to count query
    if conditions:
        count_query = count_query.where(*conditions)
    
    total_count = db.execute(count_query).scalar() or 0
    
    # Calculate pagination metadata
    total_pages = math.ceil(total_count / limit) if limit > 0 else 1
    current_page = (offset // limit) + 1 if limit > 0 else 1
    
    # Apply pagination
    query = query.offset(offset).limit(limit)
    
    # Execute query
    results = db.execute(query).mappings().all()
    
    # Convert results preserving field order
    ordered_data = []
    if requested_fields:
        # Preserve the exact order from the fields parameter
        for row in results:
            ordered_row = {}
            for field_name in requested_fields:
                if field_name in row:
                    ordered_row[field_name] = row[field_name]
                elif field_name == 'id' and 'id' in row:
                    ordered_row['id'] = row['id']
            ordered_data.append(ordered_row)
    else:
        # No specific order requested, use as-is
        ordered_data = [dict(row) for row in results]
    
    # Build pagination links
    base_url = str(router.url_path_for('get_{{ router.name }}'))
    
    # Collect all query parameters
    all_params = {
        'limit': limit,
        'offset': offset,
        {% for fk in router.model.foreign_keys %}
        '{{ fk.sql_column_name }}': {{ fk.sql_column_name }},
        {% if fk.reference_description_column %}
        '{{ fk.reference_description_column }}': {{ fk.reference_description_column }},
        {% endif %}
        {% endfor %}
        {% for column in router.model.column_analysis %}
        {% if column.sql_column_name not in ['id', 'created_at', 'updated_at'] and column.csv_column_name not in router.model.exclude_columns %}
            {% if column.sql_column_name == 'year' %}
        'year': year,
        'year_min': year_min,
        'year_max': year_max,
            {% elif column.inferred_sql_type in ['Float', 'Integer'] %}
        '{{ column.sql_column_name }}': {{ column.sql_column_name }},
        '{{ column.sql_column_name }}_min': {{ column.sql_column_name }}_min,
        '{{ column.sql_column_name }}_max': {{ column.sql_column_name }}_max,
            {% elif column.inferred_sql_type == 'SmallInteger' and column.sql_column_name != 'year' %}
        '{{ column.sql_column_name }}': {{ column.sql_column_name }},
            {% elif column.inferred_sql_type == 'String' %}
        '{{ column.sql_column_name }}': {{ column.sql_column_name }},
        '{{ column.sql_column_name }}_exact': {{ column.sql_column_name }}_exact,
            {% endif %}
        {% endif %}
        {% endfor %}
        'include_all_reference_columns': include_all_reference_columns,
        'fields': fields,
        'sort': sort,
    }
    
    links = create_pagination_links(base_url, total_count, limit, offset, all_params)
    
    # Set response headers
    response.headers["X-Total-Count"] = str(total_count)
    response.headers["X-Total-Pages"] = str(total_pages)
    response.headers["X-Current-Page"] = str(current_page)
    response.headers["X-Per-Page"] = str(limit)
    
    # Build Link header
    link_parts = []
    for rel, url in links.items():
        link_parts.append(f'<{url}>; rel="{rel}"')
    if link_parts:
        response.headers["Link"] = ", ".join(link_parts)
    
    # Return response with pagination metadata
    return {
        "data": ordered_data,
        "pagination": {
            "total": total_count,
            "total_pages": total_pages,
            "current_page": current_page,
            "per_page": limit,
            "from": offset + 1 if results else 0,
            "to": offset + len(results),
            "has_next": current_page < total_pages,
            "has_prev": current_page > 1,
        },
        "links": links,
        "_meta": {
            "generated_at": datetime.utcnow().isoformat(),
            "filters_applied": sum(1 for v in all_params.values() if v is not None and v != '' and v != False),
        }
    }


# Keep all existing metadata endpoints unchanged...
{% if router.model.foreign_keys %}
# Metadata endpoints for understanding the dataset
    {% for fk in router.model.foreign_keys %}
        {% if fk.table_name == 'item_codes' %}
@router.get("/items")
@cache_result(prefix="{{ router.name }}:items", ttl=604800)
def get_available_items(db: Session = Depends(get_db)):
    """Get all items available in this dataset with record counts"""
    query = (
        select(
            ItemCodes.item_code,
            ItemCodes.item,
            ItemCodes.item_code_cpc,
            ItemCodes.item_code_fbs,
            ItemCodes.item_code_sdg,
        )
        .where(ItemCodes.source_dataset == '{{ router.name }}')
        .order_by(ItemCodes.item_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_items": len(results),
        "items": [
            {
                "item_code": r.item_code,
                "item": r.item,
                "item_code_cpc": r.item_code_cpc,
                "item_code_fbs": r.item_code_fbs,
                "item_code_sdg": r.item_code_sdg,
            }
            for r in results
        ]
    }
        {% endif %}

        {% if fk.table_name == 'area_codes' %}
@router.get("/areas")
@cache_result(prefix="{{ router.name }}:areas", ttl=604800)
def get_available_areas(db: Session = Depends(get_db)):
    """Get all areas with data in this dataset"""
    query = (
        select(
            AreaCodes.area_code,
            AreaCodes.area,
            AreaCodes.area_code_m49,
        )
        .where(AreaCodes.source_dataset == '{{ router.name }}')
        .order_by(AreaCodes.area_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_areas": len(results),
        "areas": [
            {
                "area_code": r.area_code,
                "area": r.area,
                "area_code_m49": r.area_code_m49,
            }
            for r in results
        ]
    }
        {% endif %}

        {% if fk.table_name == 'elements' %}
@router.get("/elements")
@cache_result(prefix="{{ router.name }}:elements", ttl=604800)
def get_available_elements(db: Session = Depends(get_db)):
    """Get all elements (measures/indicators) in this dataset"""
    query = (
        select(
            Elements.element_code,  
            Elements.element
        )
        .where(Elements.source_dataset == '{{ router.name }}')
        .order_by(Elements.element_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_elements": len(results),
        "elements": [
            {
                "element_code": r.element_code,
                "element": r.element,
            }
            for r in results
        ]
    }
        {% endif %}

        {% if fk.table_name == 'flags' %}
@router.get("/flags")
@cache_result(prefix="{{ router.name }}:flags", ttl=604800)
def get_data_quality_summary(db: Session = Depends(get_db)):
    """Get data quality flag distribution for this dataset"""
    query = (
        select(
            Flags.flag,
            Flags.description,
            func.count({{ router.model.model_name }}.id).label('record_count')
        )
        .join({{ router.model.model_name }}, Flags.id == {{ router.model.model_name }}.flag_id)
        .group_by(Flags.flag, Flags.description)
        .order_by(func.count({{ router.model.model_name }}.id).desc())
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_records": sum(r.record_count for r in results),
        "flag_distribution": [
            {
                "flag": r.flag,
                "description": r.description,
                "record_count": r.record_count,
                "percentage": round(r.record_count / sum(r2.record_count for r2 in results) * 100, 2)
            }
            for r in results
        ]
    }
        {% endif %}

        {% if fk.table_name == 'reporter_country_codes' %}
@router.get("/reporter_countries")
@cache_result(prefix="{{ router.name }}:reporter_countries", ttl=604800)
def get_available_reporter_countries(db: Session = Depends(get_db)):
    """Get all reporter countries in this dataset"""
    query = (
        select(
            ReporterCountryCodes.reporter_country_code,
            ReporterCountryCodes.reporter_countries
        )
        .where(ReporterCountryCodes.source_dataset == '{{ router.name }}')
        .order_by(ReporterCountryCodes.reporter_country_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_reporter_countries": len(results),
        "reporter_countries": [
            {
                "reporter_country_code": r.reporter_country_code,
                "reporter_countries": r.reporter_countries
            }
            for r in results
        ]
    }
        {% endif %}
        {% if fk.table_name == 'partner_country_codes' %}
@router.get("/partner_countries")
@cache_result(prefix="{{ router.name }}:partner_countries", ttl=604800)
def get_available_partner_countries(db: Session = Depends(get_db)):
    """Get all partner countries in this dataset"""
    query = (
        select(
            PartnerCountryCodes.partner_country_code,
            PartnerCountryCodes.partner_countries
        )
        .where(PartnerCountryCodes.source_dataset == '{{ router.name }}')
        .order_by(PartnerCountryCodes.partner_country_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_partner_countries": len(results),
        "partner_countries": [
            {
                "partner_country_code": r.partner_country_code,
                "partner_countries": r.partner_countries
            }
            for r in results
        ]
    }
        {% endif %}
        {% if fk.table_name == 'recipient_country_codes' %}
@router.get("/recipient_countries")
@cache_result(prefix="{{ router.name }}:recipient_countries", ttl=604800)
def get_available_recipient_countries(db: Session = Depends(get_db)):
    """Get all recipient countries in this dataset"""
    query = (
        select(
            RecipientCountryCodes.recipient_country_code,
            RecipientCountryCodes.recipient_country
        )
        .where(RecipientCountryCodes.source_dataset == '{{ router.name }}')
        .order_by(RecipientCountryCodes.recipient_country_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_recipient_countries": len(results),
        "recipient_countries": [
            {
                "recipient_country_code": r.recipient_country_code,
                "recipient_country": r.recipient_country
            }
            for r in results
        ]
    }
        {% endif %}
        {% if fk.table_name == 'donors' %}
@router.get("/donors")
@cache_result(prefix="{{ router.name }}:donors", ttl=604800)
def get_available_donors(db: Session = Depends(get_db)):
    """Get all donors in this dataset"""
    query = (
        select(
            Donors.donor_code,
            Donors.donor
        )
        .where(Donors.source_dataset == '{{ router.name }}')
        .order_by(Donors.donor_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_donors": len(results),
        "donors": [
            {
                "donor_code": r.donor_code,
                "donor": r.donor
            }
            for r in results
        ]
    }
        {% endif %}
        {% if fk.table_name == 'sources' %}
@router.get("/sources")
@cache_result(prefix="{{ router.name }}:sources", ttl=604800)
def get_available_sources(db: Session = Depends(get_db)):
    """Get all sources in this dataset"""
    query = (
        select(
            Sources.source_code,
            Sources.source
        )
        .where(Sources.source_dataset == '{{ router.name }}')
        .order_by(Sources.source_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_sources": len(results),
        "sources": [
            {
                "source_code": r.source_code,
                "source": r.source
            }
            for r in results
        ]
    }
{% endif %}
{% if fk.table_name == 'releases' %}
@router.get("/releases")
@cache_result(prefix="{{ router.name }}:releases", ttl=604800)
def get_available_releases(db: Session = Depends(get_db)):
    """Get all releases in this dataset"""
    query = (
        select(
            Releases.release_code,
            Releases.release
        )
        .where(Releases.source_dataset == '{{ router.name }}')
        .order_by(Releases.release_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_releases": len(results),
        "releases": [
            {
                "release_code": r.release_code,
                "release": r.release
            }
            for r in results
        ]
    }
{% endif %}
{% if fk.table_name == 'sexs' %}
@router.get("/sexs")
@cache_result(prefix="{{ router.name }}:sexs", ttl=604800)
def get_available_sexs(db: Session = Depends(get_db)):
    """Get all sex categories in this dataset"""
    query = (
        select(
            Sexs.sex_code,
            Sexs.sex
        )
        .where(Sexs.source_dataset == '{{ router.name }}')
        .order_by(Sexs.sex_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_sexs": len(results),
        "sexs": [
            {
                "sex_code": r.sex_code,
                "sex": r.sex
            }
            for r in results
        ]
    }
{% endif %}
{% if fk.table_name == 'surveys' %}
@router.get("/surveys")
@cache_result(prefix="{{ router.name }}:surveys", ttl=604800)
def get_available_surveys(db: Session = Depends(get_db)):
    """Get all surveys in this dataset"""
    query = (
        select(
            Surveys.survey_code,
            Surveys.survey
        )
        .where(Surveys.source_dataset == '{{ router.name }}')
        .order_by(Surveys.survey_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_surveys": len(results),
        "surveys": [
            {
                "survey_code": r.survey_code,
                "survey": r.survey
            }
            for r in results
        ]
    }
{% endif %}
{% if fk.table_name == 'purposes' %}
@router.get("/purposes")
@cache_result(prefix="{{ router.name }}:purposes", ttl=604800)
def get_available_purposes(db: Session = Depends(get_db)):
    """Get all purposes in this dataset"""
    query = (
        select(
            Purposes.purpose_code,
            Purposes.purpose
        )
        .where(Purposes.source_dataset == '{{ router.name }}')
        .order_by(Purposes.purpose_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_purposes": len(results),
        "purposes": [
            {
                "purpose_code": r.purpose_code,
                "purpose": r.purpose
            }
            for r in results
        ]
    }
{% endif %}
{% if fk.table_name == 'geographic_levels' %}
@router.get("/geographic_levels")
@cache_result(prefix="{{ router.name }}:geographic_levels", ttl=604800)
def get_available_geographic_levels(db: Session = Depends(get_db)):
    """Get all geographic levels in this dataset"""
    query = (
        select(
            GeographicLevels.geographic_level_code,
            GeographicLevels.geographic_level
        )
        .where(GeographicLevels.source_dataset == '{{ router.name }}')
        .order_by(GeographicLevels.geographic_level_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_geographic_levels": len(results),
        "geographic_levels": [
            {
                "geographic_level_code": r.geographic_level_code,
                "geographic_level": r.geographic_level
            }
            for r in results
        ]
    }
{% endif %}
{% if fk.table_name == 'indicators' %}
@router.get("/indicators")
@cache_result(prefix="{{ router.name }}:indicators", ttl=604800)
def get_available_indicators(db: Session = Depends(get_db)):
    """Get all indicators in this dataset"""
    query = (
        select(
            Indicators.indicator_code,
            Indicators.indicator
        )
        .where(Indicators.source_dataset == '{{ router.name }}')
        .order_by(Indicators.indicator_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_indicators": len(results),
        "indicators": [
            {
                "indicator_code": r.indicator_code,
                "indicator": r.indicator
            }
            for r in results
        ]
    }
{% endif %}
{% if fk.table_name == 'population_age_groups' %}
@router.get("/population_age_groups")
@cache_result(prefix="{{ router.name }}:population_age_groups", ttl=604800)
def get_available_population_age_groups(db: Session = Depends(get_db)):
    """Get all population age groups in this dataset"""
    query = (
        select(
            PopulationAgeGroups.population_age_group_code,
            PopulationAgeGroups.population_age_group
        )
        .where(PopulationAgeGroups.source_dataset == '{{ router.name }}')
        .order_by(PopulationAgeGroups.population_age_group_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_population_age_groups": len(results),
        "population_age_groups": [
            {
                "population_age_group_code": r.population_age_group_code,
                "population_age_group": r.population_age_group
            }
            for r in results
        ]
    }
{% endif %}
{% if fk.table_name == 'food_groups' %}
@router.get("/food_groups")
@cache_result(prefix="{{ router.name }}:food_groups", ttl=604800)
def get_available_food_groups(db: Session = Depends(get_db)):
    """Get all food groups in this dataset"""
    query = (
        select(
            FoodGroups.food_group_code,
            FoodGroups.food_group
        )
        .where(FoodGroups.source_dataset == '{{ router.name }}')
        .order_by(FoodGroups.food_group_code)
    )
    
    results = db.execute(query).all()
    
    return {
        "dataset": "{{ router.name }}",
        "total_food_groups": len(results),
        "food_groups": [
            {
                "food_group_code": r.food_group_code,
                "food_group": r.food_group
            }
            for r in results
        ]
    }
{% endif %}
    {% endfor %}

{% if router.model.column_analysis | selectattr('sql_column_name', 'equalto', 'year') | list %}
@router.get("/years")
@cache_result(prefix="{{ router.name }}:years", ttl=604800)
def get_temporal_coverage(db: Session = Depends(get_db)):
    """Get temporal coverage information for this dataset"""
    # Get year range and counts
    query = (
        select(
            {{ router.model.model_name }}.year,
            func.count({{ router.model.model_name }}.id).label('record_count')
        )
        .group_by({{ router.model.model_name }}.year)
        .order_by({{ router.model.model_name }}.year)
    )
    
    results = db.execute(query).all()
    years_data = [{"year": r.year, "record_count": r.record_count} for r in results]
    
    if not years_data:
        return {"dataset": "{{ router.name }}", "message": "No temporal data available"}
    
    return {
        "dataset": "{{ router.name }}",
        "earliest_year": min(r["year"] for r in years_data),
        "latest_year": max(r["year"] for r in years_data),
        "total_years": len(years_data),
        "total_records": sum(r["record_count"] for r in years_data),
        "years": years_data
    }
{% endif %}

@router.get("/summary")
@cache_result(prefix="{{ router.name }}:summary", ttl=604800)
def get_dataset_summary(db: Session = Depends(get_db)):
    """Get comprehensive summary of this dataset"""
    total_records = db.query(func.count({{ router.model.model_name }}.id)).scalar()
    
    summary = {
        "dataset": "{{ router.name }}",
        "total_records": total_records,
        "foreign_keys": [
            {% for fk in router.model.foreign_keys %}
            "{{ fk.table_name }}",
            {% endfor %}
        ]
    }
    
    {% for fk in router.model.foreign_keys %}
        {% if fk.table_name == 'area_codes' %}
    summary["unique_areas"] = db.query(func.count(func.distinct({{ router.model.model_name }}.area_code_id))).scalar()
        {% elif fk.table_name == 'item_codes' %}
    summary["unique_items"] = db.query(func.count(func.distinct({{ router.model.model_name }}.item_code_id))).scalar()
        {% elif fk.table_name == 'elements' %}
    summary["unique_elements"] = db.query(func.count(func.distinct({{ router.model.model_name }}.element_code_id))).scalar()
        {% elif fk.table_name == 'flags' %}
    summary["unique_flags"] = db.query(func.count(func.distinct({{ router.model.model_name }}.flag_id))).scalar()
        {% elif fk.table_name == 'reporter_country_codes' %}
    summary["unique_reporter_countries"] = db.query(func.count(func.distinct({{ router.model.model_name }}.reporter_country_code_id))).scalar()
        {% elif fk.table_name == 'partner_country_codes' %}
    summary["unique_partner_countries"] = db.query(func.count(func.distinct({{ router.model.model_name }}.partner_country_code_id))).scalar()
        {% elif fk.table_name == 'recipient_country_codes' %}
    summary["unique_recipient_countries"] = db.query(func.count(func.distinct({{ router.model.model_name }}.recipient_country_code_id))).scalar()
        {% elif fk.table_name == 'donors' %}
    summary["unique_donors"] = db.query(func.count(func.distinct({{ router.model.model_name }}.donor_code_id))).scalar()
        {% elif fk.table_name == 'currencies' %}
    summary["unique_currencies"] = db.query(func.count(func.distinct({{ router.model.model_name }}.iso_currency_code_id))).scalar()
        {% elif fk.table_name == 'sources' %}
    summary["unique_sources"] = db.query(func.count(func.distinct({{ router.model.model_name }}.source_code_id))).scalar()
        {% elif fk.table_name == 'releases' %}
    summary["unique_releases"] = db.query(func.count(func.distinct({{ router.model.model_name }}.release_code_id))).scalar()
        {% elif fk.table_name == 'sexs' %}
    summary["unique_sexs"] = db.query(func.count(func.distinct({{ router.model.model_name }}.sex_code_id))).scalar()
        {% elif fk.table_name == 'surveys' %}
    summary["unique_surveys"] = db.query(func.count(func.distinct({{ router.model.model_name }}.survey_code_id))).scalar()
        {% elif fk.table_name == 'purposes' %}
    summary["unique_purposes"] = db.query(func.count(func.distinct({{ router.model.model_name }}.purpose_code_id))).scalar()
        {% elif fk.table_name == 'geographic_levels' %}
    summary["unique_geographic_levels"] = db.query(func.count(func.distinct({{ router.model.model_name }}.geographic_level_code_id))).scalar()
        {% elif fk.table_name == 'indicators' %}
    summary["unique_indicators"] = db.query(func.count(func.distinct({{ router.model.model_name }}.indicator_code_id))).scalar()
        {% elif fk.table_name == 'population_age_groups' %}
    summary["unique_population_age_groups"] = db.query(func.count(func.distinct({{ router.model.model_name }}.population_age_group_code_id))).scalar()
        {% elif fk.table_name == 'food_groups' %}
    summary["unique_food_groups"] = db.query(func.count(func.distinct({{ router.model.model_name }}.food_group_code_id))).scalar()
        {% endif %}
    {% endfor %}
    
    return summary
{% endif %}