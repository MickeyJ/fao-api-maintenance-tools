-- Create {{ relationship.type }} relationships from {{ table_name }}
SELECT * FROM cypher('{{ project_name }}', $$
    MATCH (source:{{ relationship.source_node }} {id: row.{{ relationship.source_fk }}})
    MATCH (target:{{ relationship.target_node }} {id: row.{{ relationship.target_fk }}})
    CREATE (source)-[r:{{ relationship.type }} {
        -- Dynamic properties from row
        {% for prop in relationship.properties %}
        -- {{ prop }}: row.{{ prop }},
        {% endfor %}
        {% for fk in module.model.foreign_keys %}
        {% if fk.table_name in relationship.original_table %}
        {{ fk.hash_fk_sql_column_name }}: row.{{ fk.hash_fk_sql_column_name }},
        {%- endif %}
        {%- endfor %}
        {# SEPARATOR #}
        {%- for col in module.model.column_analysis %}
        {%- if col.sql_column_name != 'year_code' and col.csv_column_name not in module.model.exclude_columns and col.sql_column_name not in [relationship.source_fk, relationship.target_fk, 'id'] %} 
        {{ col.sql_column_name }}: row.{{ col.sql_column_name }},
        {%- endif %}
        {% endfor %}
        -- Metadata
        source_dataset: '{{ table_name }}'
    }]->(target)
    RETURN r
$$) AS (result agtype)
FROM {{ table_name }} row
WHERE row.{{ relationship.source_fk }} IS NOT NULL
  AND row.{{ relationship.target_fk }} IS NOT NULL
  AND row.value > 0
  {% for ref_type in ['element', 'indicator', 'food_value', 'industry', 'factor'] %}
  {% if ref_type + '_codes' in relationship %}
  AND row.{{ ref_type }}_code IN ({{ relationship[ref_type + '_codes'] | map('string') | join(', ') }})
  {% endif %}
  {% endfor %}
;



