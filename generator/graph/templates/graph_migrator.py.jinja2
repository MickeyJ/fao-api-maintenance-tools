{# templates/graph_migrator.py.jinja2 #}
# Generated graph migrator for {{ module.name }}
from pathlib import Path
from sqlalchemy import text
from {{ project_name }}.db.graph_migration_base import GraphMigrationBase
from {{ project_name }}.db.database import get_session
from {{ project_name }}.core.exceptions import MigrationError
from {{ project_name }}.utils import load_sql
from {{ project_name }}.logger import logger


class {{ migration_class_name }}(GraphMigrationBase):
    """Migrator for {{ module.name }} {{ migration_type }}"""
    
    def __init__(self):
        super().__init__("{{ module.name }}", "{{ migration_type }}")
    
    def get_migration_query(self) -> str:
        return load_sql("{{ node_name }}.cypher.sql", Path(__file__).parent)
    
    def get_index_queries(self) -> str:
        return load_sql("{{ node_name }}_indexes.sql", Path(__file__).parent)
    
    def get_verification_query(self) -> str:
      return load_sql("{{ node_name }}_verify.cypher.sql", Path(__file__).parent)
    
    def migrate(self, start_offset: int = 0, mode: str = "create") -> None:
        """Execute the migration for {{ module.name }}"""
        logger.info(f"Starting {{ module.name }} migration...")
        
        try:
            # Execute the main migration
            with get_session() as session:
                query = self.get_migration_query()
                result = session.execute(text(query)).fetchall()
                self.created = len(result)
                logger.info(f"Created {self.created} {{ node_name_pascal }} {self.migration_type}")
            
            # Create indexes using the existing method
            self.create_indexes()
                    
        except KeyboardInterrupt:
            logger.warning(f"\n{{ module.name }} migration interrupted")
            raise
        except Exception as e:
            logger.error(f"Failed to migrate {{ module.name }}: {e}")
            raise MigrationError(f"{{ module.name }} migration failed: {e}") from e
    
    def create(self, records):
        # Not used when overriding migrate()
        pass
    
    def update(self, records):
        # Not used when overriding migrate()
        pass