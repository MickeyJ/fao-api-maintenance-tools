# yaml_migrator.py.jinja2
# Generated migrator for {{ migration_type }} {{ pipeline_name }}
from pathlib import Path
{% if migration_type == 'relationship' %}
from sqlalchemy import text

from {{ project_name }}.db.database import get_session
{% endif %}
from {{ project_name }}.db.graph_migration_base import GraphMigrationBase
from {{ project_name }}.utils import load_sql
from {{ project_name }}.logger import logger


class {{ migration_class_name }}(GraphMigrationBase):
    """Migrator for {{ description }}"""
    
    def __init__(self):
        super().__init__("{{ table_name }}", "{{ migration_type }}")
        {% if migration_type == 'relationship' %}
        self.relationship_type = "{{ relationship_type }}"
        {% else %}
        self.node_label = "{{ node_label }}"
        {% endif %}
    
    def get_migration_query(self) -> str:
        return load_sql("{{ migration_query_filename }}", Path(__file__).parent)
    
    def get_verification_query(self) -> str:
        return load_sql("{{ verify_query_filename }}", Path(__file__).parent)

    {% if index_query_filename %}
    def get_index_queries(self) -> str:
        return load_sql("{{ index_query_filename }}", Path(__file__).parent)
    {% endif %}
    {# spacer #}
    {% if migration_type == 'relationship' %}
    def get_count_query(self) -> str:
        """Count records matching our filters"""
        return f"""
            SELECT COUNT(*) as total
            FROM {{ table_name }} t
            {% for column_name, column in relationship.identifiers.items() %}
            JOIN {{ column.table_name }} ON t.{{ column.hash_fk_sql_column_name }} = {{ column.table_name }}.id
            {% endfor %}
            WHERE t.{{ relationship.source_fk }} IS NOT NULL
                AND t.{{ relationship.target_fk }} IS NOT NULL
                {% if 'value' in relationship.rel_props %}
                AND t.value > 0
                {% endif %}
                {% for column_name, column in relationship.identifiers.items() %}
                {% for filter in relationship.filters %}
                {% if filter['field'] == column.sql_column_name %}
                AND {{ column.table_name }}.{{ column.sql_column_name }} IN ({{ filter['values'] | join(', ') }})
                {% endif %}
                {% endfor %}
                {% endfor %}
        """
    
    def create(self, records):
        """Create relationships in AGE"""
        with get_session() as session:
            for record in records:
                query = text("""
                    SELECT * FROM cypher('{{ project_name }}', $$
                        MATCH (source:{{ relationship.source_label }} {id: $source_id, source_dataset: "{{ table_name }}" })
                        MATCH (target:{{ relationship.target_label }} {id: $target_id, source_dataset: "{{ table_name }}" })
                        CREATE (source)-[r:{{ relationship_type }} $props]->(target)
                        RETURN r
                    $$, $params) AS (result agtype)
                """)
                
                props = {
                    {% for prop in relationship.rel_props %}
                    "{{ prop }}": getattr(record, "{{ prop }}"),
                    {% endfor %}
                    {% for column_name, column in relationship.identifiers.items() %}
                    "{{ column.sql_column_name }}": getattr(record, "{{ column.sql_column_name }}"),
                    "{{ column.reference_description_column }}": getattr(record, "{{ column.reference_description_column }}"),
                    {% endfor %}
                    "source_dataset": "{{ table_name }}"
                }
                
                params = {
                    "source_id": getattr(record, "{{ relationship.source_fk }}"),
                    "target_id": getattr(record, "{{ relationship.target_fk }}"),
                    "props": props
                }
                
                session.execute(query, {
                    "params": params
                })
                self.created += 1

    {% endif %}